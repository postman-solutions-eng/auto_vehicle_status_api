{
    "info": {
        "_postman_id": "efd8e075-4a88-49c6-ae4a-7762e09f14be",
        "name": "Vehicle Status",
        "description": "Performance Motor's Vehicle Status API allows users to get up-to-the-minute status updates on many elements of PM-integrated cars. \n\n\n![Vehicle Status](https://user-images.githubusercontent.com/20145532/130462680-1ccaee0c-a528-42d7-9871-309b0de5ad8f.png)\n\n\n## Getting Started\nWe recommend starting in the `APIs` tab on the left vertical sidebar. Here, you can see the different APIs that are built by PM developers, as well as browse the API specifications. Once you are on the `Define` tab of an individual API, you will be able to see the associated resources (Documentation, Tests, Mock Servers, etc.), and navigate between the different API versions. \n\nOver in the `Collections` view, you will notice that each request has an example response associated with it. By calling the mock server endpoint (just the base url replaced with one generated by Postman's mock server generator), you will be able to access these sample responses without going through the registration/authentication process.\n\nWe've also included a visualizer dashboard which you can find on the `Complete Status` request. Try sending the request a few times and see the different error lights come on.\n\n![dashboard](https://user-images.githubusercontent.com/20145532/131050307-25ab8a80-9366-475d-a66e-69247ba0a420.png)\n\n\n## Authentication\nTo get started testing the API, you will need to create a developer account in the PM Developer Portal. There, you will be issued an API key to use. This is to be kept confidential and not published or shared with other developers. You may store this key at any level of the Postman app: (collection, environment, or global variable fields), just make sure to only store it in the `current` column, as those values are only stored locally, and any data in the `initial` field will be synced with the cloud and could be exposed to others using your workspace.\n\n\n## Associated Resources\n- There is an **OpenAPI file** that was used to generate this collection, which you can find in the \"APIs\" tab on the left vertical sidebar. As the API itself evolves, we will use the two-way git sync to update the spec from Bitbucket to Postman, and thus translate those changes over to this documentation collection. \n  - Be sure to check back to this collection before you start implementing, and click the Watch icon on the API to be alerted to any changes\n- **Monitor**: Under the Monitors tab on the same vertical toolbar, we have set up a monitor that runs the collection once a day and displays the results of the tests. \n- **Mock Server**: As this API is liable to expose sensitive information, we have set up a mock server to return example responses. You can still send the requests, just make sure the `baseUrl` variable is filled in with the monitor url to receive a response.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Battery",
            "item": [
                {
                    "name": "Battery",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "849d1d5c-63f4-4eb7-9270-3127d5e224a5",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains battery health\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"health\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "4db10f02-5013-478a-b8d8-2991140d316c",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/battery",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "battery"
                            ]
                        },
                        "description": "Returns a status and health report for all connected battery elements (includes EV batteries as well). \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "608f7ecf-1f02-40ea-9174-716d89fb3159",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/battery",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "battery"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"health\": \"good\",\n    \"charging\": true,\n    \"voltage\": 14.2,\n    \"cca\": 600,\n    \"type\": \"AGM\",\n    \"install\": \"2020-02-02\",\n    \"overvolt\": false\n}"
                        }
                    ]
                }
            ],
            "id": "eedc60bc-1d1f-44a0-866c-7822344e9082"
        },
        {
            "name": "Doors",
            "item": [
                {
                    "name": "Doors",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "04d6f90f-7367-4edf-b8af-4161477c8646",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains door info\", function () {",
                                    "    pm.expect(res).to.have.all.keys(['front', 'rear']);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "70e0c90d-1ef6-4ffe-9d8e-7101a60d1f8a",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/doors",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "doors"
                            ]
                        },
                        "description": "Returns a status report indicating which, if any doors are open at the time of the request. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "a7a6ecc3-e1c2-4f9f-9bf5-0fbadfc20ac3",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/doors",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "doors"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"front\": {\n        \"left\": {\n            \"open\": true\n        },\n        \"right\": {\n            \"open\": true\n        }\n    },\n    \"rear\": {\n        \"left\": {\n            \"open\": false\n        },\n        \"right\": {\n            \"open\": false\n        }\n    }\n}"
                        }
                    ]
                }
            ],
            "id": "fe6da2b5-233e-4023-9629-0dbd574d5678"
        },
        {
            "name": "Engine",
            "item": [
                {
                    "name": "Engine",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "f16971cb-4681-46d5-81ff-10d794c0e4a3",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains engine info\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"running\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "5c0984f7-a3ef-4e77-a4ef-257e72124f05",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/engine",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "engine"
                            ]
                        },
                        "description": "Returns a complete status and health update for the engine. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "2d5317b0-f195-4735-84f6-68ef7550de4e",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/engine",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "engine"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"running\": true,\n    \"rpm\": 800,\n    \"coolantTemp\": 92,\n    \"oilTemp\": 80,\n    \"oilPressure\": 4\n}"
                        }
                    ]
                }
            ],
            "id": "0cd6db9a-d8cb-4765-bde0-9708da3f0cfb"
        },
        {
            "name": "Fuel",
            "item": [
                {
                    "name": "Fuel",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "7ea2f9bc-62ee-4d28-8d92-cac6e8c99d6f",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains fuel info\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"gas\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "90476adc-7afb-4b1a-a0c6-2c8962bf4568",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/fuel",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "fuel"
                            ]
                        },
                        "description": "Returns a status update for the fuel tank. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "64dac9d5-67e0-4453-b4d8-55551a08e18f",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/fuel",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "fuel"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"level\": 90,\n    \"gas\": true,\n    \"pressure\": 40,\n    \"ethanolContent\": 5\n}"
                        }
                    ]
                }
            ],
            "id": "ba6feaa7-74dd-45b4-af0d-f9e9b98d169e"
        },
        {
            "name": "Interior",
            "item": [
                {
                    "name": "Interior",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "b938efaa-ad18-4f46-8df9-58aa3a92ce1b",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains interior info\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"alarm\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "449686d8-1551-4350-a2da-1145b84fe71a",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/interior",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "interior"
                            ]
                        },
                        "description": "Returns a complete status update for elements affecting the car cabin. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "93cd063f-5f7d-4983-bade-efb317f7bd24",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/interior",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "interior"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"alarm\": \"off\",\n    \"lights\": \"on\",\n    \"temp\": 68,\n    \"gear\": \"p\"\n}"
                        }
                    ]
                }
            ],
            "id": "6e945d2f-0dc9-4a4a-b8bf-c415df37ea25"
        },
        {
            "name": "Lights",
            "item": [
                {
                    "name": "Lights",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "e2c85147-39c9-44a8-af67-52ab0486b598",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains lighting info\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"hazards\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "24d762fc-1faf-4426-bbfd-384649b916d3",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/lights",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "lights"
                            ]
                        },
                        "description": "Returns a status update for both internal and external car lights. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "683e123b-41d6-4023-8455-475fd1a46311",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/lights",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "lights"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"daytime\": true,\n    \"sidelight\": false,\n    \"main\": false,\n    \"brights\": false,\n    \"leftSignal\": true,\n    \"rightSignal\": true,\n    \"hazards\": true\n}"
                        }
                    ]
                }
            ],
            "id": "728f0980-5edf-4e2f-aaa6-4cc8dde0b895"
        },
        {
            "name": "Roof",
            "item": [
                {
                    "name": "Roof",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "a143c439-3777-4fd3-bb56-cd43d3564dae",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains roof info\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"sunroof\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "1ba15f52-24c6-433f-bd31-7627ce8c4591",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/roof",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "roof"
                            ]
                        },
                        "description": "Returns a status update for all connected roof elements. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "e84ec0ac-33aa-40dd-bfe7-0f2dcbcd55b9",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/roof",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "roof"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n \"sunroof\": {},\n \"convertible\": \"up\"\n}"
                        }
                    ]
                }
            ],
            "id": "341b7a80-7e11-4376-b464-84c689abe199"
        },
        {
            "name": "Odometer",
            "item": [
                {
                    "name": "Odometer",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "a280ac6e-e0e5-4d7e-bab5-3918cff7783a",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains odometer info\", function () {",
                                    "    pm.expect(res).to.have.a.property(\"miles\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "bb053ec4-79f5-4f8e-967c-5218553f6ddb",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/odometer",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "odometer"
                            ]
                        },
                        "description": "Returns a the current odometer reading in both km and miles. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "63c01077-302d-4ad1-8374-26c78189f9f1",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/odometer",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "odometer"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"km\": 100000,\n    \"miles\": 62000\n}"
                        }
                    ]
                }
            ],
            "id": "8785a0a6-b412-4d93-bc31-cda6f8a6f013"
        },
        {
            "name": "Windows",
            "item": [
                {
                    "name": "Windows",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "edaaa3d0-ae47-40eb-b12b-b33d1ec092d0",
                                "exec": [
                                    "const res = pm.response.json();",
                                    "",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Repsonse contains window info\", function () {",
                                    "    pm.expect(res).to.have.all.keys(['front', 'rear']);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "265bab51-3be1-45d8-8a02-492d0a8c075c",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status/windows",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status",
                                "windows"
                            ]
                        },
                        "description": "Returns a status update for all connected window elements. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n"
                    },
                    "response": [
                        {
                            "id": "e62fd550-b1cb-4d38-8bd6-1785446a9c01",
                            "name": "Success",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/status/windows",
                                    "host": [
                                        "{{url}}"
                                    ],
                                    "path": [
                                        "status",
                                        "windows"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n    \"front\": {\n        \"left\": {\n            \"open\": true\n        },\n        \"right\": {\n            \"open\": true\n        }\n    },\n    \"rear\": {\n        \"left\": {\n            \"open\": false\n        },\n        \"right\": {\n            \"open\": false\n        }\n    }\n}"
                        }
                    ]
                }
            ],
            "id": "0f60c193-ea8e-4fef-864b-139ff4390763"
        },
        {
            "name": "Complete Status",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "8ba85cda-58d0-493c-99ee-fb9490dc776c",
                        "exec": [
                            "const res = pm.response.json();",
                            "",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Repsonse contains all vehicle status information\", function () {",
                            "    pm.expect(res).to.have.all.keys(['battery', 'doors', 'engine', 'fuel', 'interior', 'lights', 'roof', 'odometer', 'windows']);",
                            "});",
                            "",
                            "",
                            "const template = `",
                            "<style type=\"text/css\">",
                            "        #oilTempContainer {",
                            "            width: 32%;",
                            "            float: left;",
                            "        }",
                            "        #coolantTempContainer {",
                            "            width: 32%;",
                            "            float:left ;",
                            "        }   ",
                            "         #fuelContainer {",
                            "            width: 32%;",
                            "            float: left;",
                            "        }   ",
                            "        .odometer {",
                            "         font-size: 50px;",
                            "        }",
                            "        #odometerContainer {",
                            "            width: 40%;",
                            "            padding: 40px;",
                            "            float:left;",
                            "        }   ",
                            "         #icons {",
                            "            width: 40%;",
                            "            float: left;",
                            "        }   ",
                            "        p{",
                            "            color: white;",
                            "            font-family: \"Courier New\";",
                            "        }",
                            "        h2{",
                            "            color: white;",
                            "            font-family: \"Courier New\";",
                            "        }",
                            "        h3{",
                            "            color: white;",
                            "            font-family:  \"Courier New\";",
                            "            line-height:1",
                            "        }",
                            "        body {",
                            "            background-color: black;",
                            "            }",
                            "        .neonText {",
                            "            color: #fff;",
                            "            text-shadow:",
                            "                0 0 7px #fff,",
                            "                0 0 10px #fff,",
                            "                0 0 21px #fff,",
                            "                0 0 42px #0fa,",
                            "                0 0 82px #0fa,",
                            "                0 0 92px #0fa;",
                            "        }",
                            "        .true{",
                            "        text-shadow:",
                            "                0 0 7px #fff,",
                            "                0 0 10px #fff,",
                            "                0 0 21px #fff,",
                            "                0 0 42px #0fa,",
                            "                0 0 82px #0fa,",
                            "                0 0 92px #0fa;",
                            "        }",
                            "        .outline {",
                            "           border: none;",
                            "            border-radius: 4pt;",
                            "            box-shadow: 0 0 0 2pt grey;",
                            "            outline: none;",
                            "            transition: .1s;",
                            "            padding: 10px;",
                            "            margin-top: 25px;",
                            "            align: center;",
                            "         }",
                            "</style>",
                            "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">",
                            "",
                            "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/odometer.js/0.4.7/themes/odometer-theme-train-station.min.css\" />",
                            "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/odometer.js/0.4.7/odometer.min.js\"></script>",
                            "<script src=\"https://cdn.amcharts.com/lib/4/core.js\"></script>",
                            "<script src=\"https://cdn.amcharts.com/lib/4/charts.js\"></script>",
                            "<script src=\"https://cdn.amcharts.com/lib/4/themes/animated.js\"></script>",
                            "",
                            "<!-- Chart code -->",
                            "<script>",
                            "    am4core.ready(function() {",
                            "        am4core.useTheme(am4themes_animated);",
                            "",
                            "        //each data object will populate a different gauge",
                            "        var coolantData = {",
                            "            chartMin: 0,",
                            "            chartMax: 100,",
                            "            score: {{res.engine.coolantTemp}},",
                            "            gradingData: [",
                            "                {",
                            "                    title: \"Cool\",",
                            "                    color: \"#5499C7\",",
                            "                    lowScore: 0,",
                            "                    highScore: 25",
                            "                },",
                            "                {",
                            "                    title: \"OK\",",
                            "                    color: \"#f3eb0c\",",
                            "                    lowScore: 25,",
                            "                    highScore: 85",
                            "                },",
                            "                {",
                            "                    title: \"Hot\",",
                            "                    color: \"#ee1f25\",",
                            "                    lowScore: 85,",
                            "                    highScore: 100",
                            "                }",
                            "            ]",
                            "        };",
                            "        var oilData = {",
                            "            chartMin: 0,",
                            "            chartMax: 100,",
                            "            score: {{res.engine.oilTemp}},",
                            "            gradingData: [",
                            "                {",
                            "                    title: \"Cool\",",
                            "                    color: \"#5499C7\",",
                            "                    lowScore: 0,",
                            "                    highScore: 25",
                            "                },",
                            "                {",
                            "                    title: \"OK\",",
                            "                    color: \"#f3eb0c\",",
                            "                    lowScore: 25,",
                            "                    highScore: 85",
                            "                },",
                            "                {",
                            "                    title: \"Hot\",",
                            "                    color: \"#0f9747\",",
                            "                    lowScore: 85,",
                            "                    highScore: 100",
                            "                }",
                            "            ]",
                            "        };",
                            "         var fuelData = {",
                            "            chartMin: 0,",
                            "            chartMax: 100,",
                            "            score: {{res.fuel.level}},",
                            "            gradingData: [",
                            "                {",
                            "                    title: \"Fill Soon\",",
                            "                    color: \"#ee1f25\",",
                            "                    lowScore: 0,",
                            "                    highScore: 20",
                            "                },",
                            "                {",
                            "                    title: \"OK\",",
                            "                    color: \"#0f9747\",",
                            "                    lowScore: 20,",
                            "                    highScore: 100",
                            "                }",
                            "            ]",
                            "        };",
                            "",
                            "    //grading lookup ",
                            "    function lookUpGrade(lookupScore, grades) {",
                            "        for (var i = 0; i < grades.length; i++) {",
                            "            if (grades[i].lowScore < lookupScore &&",
                            "                grades[i].highScore >= lookupScore ) {",
                            "                return grades[i];",
                            "            }",
                            "        }",
                            "        return null;",
                            "    }",
                            "",
                            "    //reuse the code in the function below to create three different gauges.",
                            "    createGauge(coolantData, \"coolantTemp\")",
                            "    createGauge(oilData, \"oilTemp\")",
                            "    createGauge(fuelData, \"fuel\")",
                            "",
                            "    function createGauge(data, divName) {",
                            "",
                            "        // create chart",
                            "        var chart = am4core.create(divName, am4charts.GaugeChart);",
                            "        chart.hiddenState.properties.opacity = 0;",
                            "        chart.fontSize = 6;",
                            "        chart.innerRadius = am4core.percent(80);",
                            "        chart.resizable = true;",
                            "",
                            "        //normal axis",
                            "        var axis = chart.xAxes.push(new am4charts.ValueAxis());",
                            "        axis.min = data.chartMin;",
                            "        axis.max = data.chartMax;",
                            "        axis.strictMinMax = true;",
                            "        axis.renderer.radius = am4core.percent(80);",
                            "        axis.renderer.inside = true;",
                            "        axis.renderer.line.strokeOpacity = 0.1;",
                            "        axis.renderer.ticks.template.disabled = false;",
                            "        axis.renderer.ticks.template.strokeOpacity = 1;",
                            "        axis.renderer.ticks.template.strokeWidth = 0.5;",
                            "        axis.renderer.ticks.template.length = 5;",
                            "        axis.renderer.grid.template.disabled = true;",
                            "        axis.renderer.labels.template.radius = am4core.percent(15);",
                            "        axis.renderer.labels.template.fontSize = \"0.9em\";",
                            "",
                            "        ",
                            "        //axis for ranges - the color band axis ",
                            "        var axis2 = chart.xAxes.push(new am4charts.ValueAxis());",
                            "        axis2.min = data.chartMin;",
                            "        axis2.max = data.chartMax;",
                            "        axis2.strictMinMax = true;",
                            "        axis2.renderer.labels.template.disabled = true;",
                            "        axis2.renderer.ticks.template.disabled = true;",
                            "        axis2.renderer.grid.template.disabled = false;",
                            "        axis2.renderer.grid.template.opacity = 0.5;",
                            "        axis2.renderer.labels.template.bent = true;",
                            "        axis2.renderer.labels.template.fill = am4core.color(\"#000\");",
                            "        axis2.renderer.labels.template.fontWeight = \"bold\";",
                            "        axis2.renderer.labels.template.fillOpacity = 0.3;",
                            "",
                            "        //ranges",
                            "        for (let grading of data.gradingData) {",
                            "            var range = axis2.axisRanges.create();",
                            "            range.axisFill.fill = am4core.color(grading.color);",
                            "            range.axisFill.fillOpacity = 0.8;",
                            "            range.axisFill.zIndex = -1;",
                            "            range.value = grading.lowScore > data.chartMin ? grading.lowScore : data.chartMin;",
                            "            range.endValue = grading.highScore < data.chartMax ? grading.highScore : data.chartMax;",
                            "            range.grid.strokeOpacity = 0;",
                            "            range.stroke = am4core.color(grading.color).lighten(-0.1);",
                            "            range.label.inside = true;",
                            "            range.label.text = grading.title.toUpperCase();",
                            "            range.label.inside = true;",
                            "            range.label.location = 0.5;",
                            "            range.label.inside = true;",
                            "            range.label.radius = am4core.percent(10);",
                            "            range.label.paddingBottom = -5; // ~half font size",
                            "            range.label.fontSize = \"0.9em\";",
                            "        }",
                            "",
                            "        var matchingGrade = lookUpGrade(data.score, data.gradingData);",
                            "",
                            "        //label 1 - center number",
                            "        var label = chart.radarContainer.createChild(am4core.Label);",
                            "        label.isMeasured = false;",
                            "        label.fontSize = \"6em\";",
                            "        label.x = am4core.percent(50);",
                            "        label.paddingBottom = 15;",
                            "        label.horizontalCenter = \"middle\";",
                            "        label.verticalCenter = \"bottom\";",
                            "        //label.dataItem = data;",
                            "        label.text = data.score.toFixed(1);",
                            "        label.fill = am4core.color(matchingGrade.color);",
                            "",
                            "        //label 2 - center status label (ok, etc)",
                            "        var label2 = chart.radarContainer.createChild(am4core.Label);",
                            "        label2.isMeasured = false;",
                            "        label2.fontSize = \"2em\";",
                            "        label2.horizontalCenter = \"middle\";",
                            "        label2.verticalCenter = \"bottom\";",
                            "        label2.text = matchingGrade.title.toUpperCase();",
                            "        label2.fill = am4core.color(matchingGrade.color);",
                            "",
                            "        //guage hand",
                            "        var hand = chart.hands.push(new am4charts.ClockHand());",
                            "        hand.axis = axis2;",
                            "        hand.innerRadius = am4core.percent(55);",
                            "        hand.startWidth = 8;",
                            "        hand.pin.disabled = true;",
                            "        hand.value = 0;",
                            "        hand.fill = am4core.color(\"#444\");",
                            "        hand.stroke = am4core.color(\"#000\");",
                            "",
                            "        hand.events.on(\"positionchanged\", function(){",
                            "            label.text = axis2.positionToValue(hand.currentPosition).toFixed(1);",
                            "            var value2 = axis.positionToValue(hand.currentPosition);",
                            "            var matchingGrade = lookUpGrade(axis.positionToValue(hand.currentPosition), data.gradingData);",
                            "            label2.text = matchingGrade.title.toUpperCase();",
                            "            label2.fill = am4core.color(matchingGrade.color);",
                            "            label2.stroke = am4core.color(matchingGrade.color);  ",
                            "            label.fill = am4core.color(matchingGrade.color);",
                            "        })",
                            "        //animate the hand going to the value. middle number is the duration of the animation.",
                            "        setInterval(function() {",
                            "            hand.showValue(data.score, 1000, am4core.ease.cubicOut);",
                            "        }, 2000);",
                            "",
                            "    }//end create gauge",
                            "",
                            "}); // end am4core.ready()",
                            "</script>",
                            "<script>",
                            "    //set the delay for when the odometer starts to change",
                            "    setTimeout(function(){",
                            "        odometer.innerHTML = {{res.odometer.miles}};",
                            "    }, 1000);",
                            "</script>",
                            "",
                            "<!-- HTML -->",
                            "<div align=\"center\">",
                            "  <h2 class=\"neonText\">Performance Motors</h2>",
                            "  <h3 class=\"neonText\">Connected Car Dashboard</h3>",
                            "</div>",
                            "<!-- the three gauges we made above with amCharts. The empty divs are what amCharts populates -->",
                            "<div align=\"center\" id =\"coolantTempContainer\">",
                            "    <div  id=\"coolantTemp\"> </div>",
                            "    <p class=\"neonText\">Coolant</p>",
                            "</div>",
                            "<div align=\"center\" id=\"oilTempContainer\">",
                            "    <div  id=\"oilTemp\"></div>",
                            "    <p class=\"neonText\">Oil Temp</p>",
                            "</div>",
                            "<div align=\"center\" id=\"fuelContainer\">",
                            "    <div id=\"fuel\"></div>",
                            "    <p class=\"neonText\">Fuel</p>",
                            "</div>",
                            "<div id=\"odometerContainer\" >",
                            "    <!-- The value here is what number the odometer starts at -->",
                            "    <div id=\"odometer\" class=\"odometer\">10000</div>",
                            "    <p class=\"neonText\" align=\"center\">Odometer / Miles</p> ",
                            "</div>",
                            "",
                            "<!--light up the icons in the alerts box based on if their random boolean variable in the example is true -->",
                            "<div  id=\"icons\">",
                            "    <div class=\"outline\">",
                            "        <i class=\"material-icons {{res.battery.charging}} \" style=\"font-size:40px;color:green;\">power</i>",
                            "        <i class=\"material-icons {{res.lights.main}}\"  style=\"font-size:40px;color:white;\">tungsten</i>",
                            "        <i class=\"material-icons {{res.lights.hazards}}\"  style=\"font-size:40px;color:orange;\">warning</i>",
                            "        <i class=\"material-icons {{res.fuel.gas}}\" style=\"font-size:40px;color:red;\">local_gas_station</i>",
                            "        <i class=\"material-icons {{res.roof.sunroofOpen}}\" style=\"font-size:40px;color:yellow;\">wb_sunny</i>",
                            "        <i class=\"material-icons {{windowsOpen}}\" style=\"font-size:40px;color:purple;\">grid_on</i>",
                            "        <i class=\"material-icons {{res.lights.brights}}\" style=\"font-size:40px;color:blue;\">toll</i>",
                            "    </div>",
                            "    <p class=\"neonText\" align=\"center\">Alerts</p>",
                            "</div>",
                            "",
                            "",
                            "",
                            "`",
                            "var windowsOpen = false;",
                            "if(res.windows.front.left.open || res.windows.front.right.open || res.windows.rear.right.open || res.windows.rear.left.open){",
                            "windowsOpen=true;",
                            "}",
                            "console.log(windowsOpen)",
                            "pm.visualizer.set(template, { res, windowsOpen });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "0fb43d00-3809-4215-9cd3-e7dfeb1d57d6",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{url}}/status",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "status"
                    ]
                },
                "description": "Returns a complete status update encompassing all connected elements upon successful execution. \n\nAs status checks are core features of the PM connected car experience, this feature is allowed by default in the customer account settings. However, users do have the option to revoke remote status reporting access to APIs and rely only on the car dashboard indicators. Thus, developers should check for a successful response before continuing with any further workflows.  \n\nWe've also included a visualizer dashboard which you can find on the Complete Status request. Try sending the request a few times and see the different error lights come on.\n\n![dashboard](https://user-images.githubusercontent.com/20145532/131050307-25ab8a80-9366-475d-a66e-69247ba0a420.png)"
            },
            "response": [
                {
                    "id": "a3b95a59-fc12-48bc-bc35-f753e491d32f",
                    "name": "Success",
                    "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/status",
                            "host": [
                                "{{url}}"
                            ],
                            "path": [
                                "status"
                            ]
                        }
                    },
                    "_postman_previewlanguage": "json",
                    "header": [],
                    "cookie": [],
                    "responseTime": null,
                    "body": "{\n    \"battery\": {\n        \"health\": \"good\",\n        \"charging\": {{$randomBoolean}},\n        \"voltage\": 14.2,\n        \"cca\": 600,\n        \"type\": \"AGM\",\n        \"install\": \"2020-02-02\",\n        \"overvolt\": {{$randomBoolean}}\t\n    },\n    \"doors\": {\n        \"front\": {\n            \"left\": {\n                \"open\": {{$randomBoolean}}\n            },\n            \"right\": {\n                \"open\":  {{$randomBoolean}}\n            }\n        },\n        \"rear\": {\n            \"left\": {\n                \"open\":  {{$randomBoolean}}\n            },\n            \"right\": {\n                \"open\":  {{$randomBoolean}}\n            }\n        }\n    },\n    \"engine\": {\n        \"running\":  {{$randomBoolean}},\n        \"rpm\": 800,\n        \"coolantTemp\": 92,\n        \"oilTemp\": 80,\n        \"oilPressure\": 4\n    },\n    \"fuel\": {\n        \"level\": 10,\n        \"gas\":  true,\n        \"pressure\": 40,\n        \"ethanolContent\": 5\n    },\n    \"interior\": {\n        \"alarm\": \"off\",\n        \"lights\": \"on\",\n        \"temp\": 68,\n        \"gear\": \"p\"\n    },\n    \"lights\": {\n        \"daytime\":  {{$randomBoolean}},\n        \"sidelight\":  {{$randomBoolean}},\n        \"main\":  {{$randomBoolean}},\n        \"brights\":  {{$randomBoolean}},\n        \"leftSignal\":  {{$randomBoolean}},\n        \"rightSignal\":  {{$randomBoolean}},\n        \"hazards\":  {{$randomBoolean}}\n    },\n    \"roof\": {\n        \"sunroofOpen\": {{$randomBoolean}},\n        \"convertible\": \"up\"\n    },\n    \"odometer\": {\n        \"km\": 100000,\n        \"miles\": 62000\n    },\n    \"windows\": {\n        \"front\": {\n            \"left\": {\n                \"open\":  {{$randomBoolean}}\n            },\n            \"right\": {\n                \"open\":  {{$randomBoolean}}\n            }\n        },\n        \"rear\": {\n            \"left\": {\n                \"open\":  {{$randomBoolean}}\n            },\n            \"right\": {\n                \"open\":  {{$randomBoolean}}\n            }\n        }\n    }\n}"
                }
            ]
        }
    ]
}